Here's a structured design brief for your AI coding assistant to implement the payment system in your existing application:

---

**Payment System Integration Design Brief**  
**Project:** E-Commerce Web Application  
**Feature:** OPay Payment Gateway with Webhook Verification  

---

### **1. Core Objectives**
- Implement secure payment processing flow with OPay integration
- Add real-time payment status updates with 10-minute countdown timer
- Develop automated webhook verification system
- Maintain existing UI components while adding backend functionality

---

### **2. Technical Requirements**

**A. Payment Flow Components**
1. **OPay Webhook Endpoint**
   - Signature verification using HMAC-SHA512
   - Payment status handling (Success/Failed/Pending)
   - Idempotent transaction processing

2. **Database Modifications**
   ```sql
   -- Add to existing payments table
   ADD COLUMN payment_reference VARCHAR(255) UNIQUE,
   ADD COLUMN expires_at DATETIME,
   ADD COLUMN verification_status ENUM('pending','verified','expired') DEFAULT 'pending';
   ```

3. **Payment Session Management**
   - Generate unique transaction references
   - 10-minute expiration timer
   - Automatic status updates via webhook

4. **Frontend Integration Points**
   - Existing payment page UI
   - Countdown timer component
   - Payment confirmation button handler
   - Real-time status display

---

### **3. Payment Flow Sequence**

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant OPay

    User->>Frontend: Initiate payment
    Frontend->>Backend: Create payment session
    Backend->>Frontend: Return payment details + timer
    Frontend->>User: Display account details & timer
    User->>OPay: Complete bank transfer
    OPay->>Backend: Webhook notification
    Backend->>Database: Verify & update payment status
    Backend->>Frontend: Real-time status update
    Frontend->>User: Display payment confirmation
```

---

### **4. Key Technical Specifications**

**A. Backend Requirements**
- Node.js/Express framework
- MySQL database integration
- Webhook route: `/api/payments/webhook/opay`
- Payment session endpoints:
  ```javascript
  POST /api/payments/initialize
  GET /api/payments/status/:sessionId
  ```

**B. Frontend Requirements**
- React integration (existing UI)
- Countdown timer logic:
  ```javascript
  // Timer requirements
  startTime: Date.now()
  duration: 600000ms // 10 minutes
  updateInterval: 1 second
  expirationAction: Disable confirmation button
  ```
- Payment confirmation button states:
  - Active (pending verification)
  - Disabled (expired)
  - Success state (verified)

**C. Third-Party Services**
- OPay Merchant API
- Webhook security protocols
- Bank account validation service

---

### **5. Key Features to Implement**
- Real-time payment status synchronization
- Automated webhook verification system
- User notification system for:
  - Payment expiration
  - Successful verification
  - Transaction failures
- Payment session timeout handling
- Duplicate transaction prevention

---

### **6. Security Requirements**
1. Webhook Security
   - HMAC signature verification
   - IP whitelisting (if supported by OPay)
   - Request validation middleware

2. Data Protection
   - Encrypt sensitive payment data
   - Secure database connections
   - Input sanitization for all endpoints

3. Rate Limiting
   - 5 requests/minute for payment endpoints
   - 10 requests/minute for webhook

---

### **7. Integration with Existing Systems**
1. User Authentication
   - Connect payment sessions to user accounts
   - Maintain existing auth flow

2. Order Management
   - Update order status on payment verification
   - Sync with existing inventory system

3. Notification System
   - Integrate with existing email/SMS service
   - Use current UI notification components

4. Analytics & Logging
   - Track payment success/failure rates
   - Log webhook events
   - Monitor expiration patterns

---

### **8. Testing Requirements**
- Unit tests for:
  - Signature verification
  - Payment session creation
  - Status update logic
- Webhook simulation tests
- Edge case testing:
  - Duplicate webhook notifications
  - Partial payments
  - Network failures
- UI integration testing with mock timer

---

### **9. Deployment Requirements**
1. Replit-Specific Configuration
   - Environment variables setup
   - Database connection pooling
   - HTTPS configuration

2. Monitoring
   - Error tracking implementation
   - Performance monitoring
   - Webhook delivery logs

---

### **10. Post-Launch Requirements**
- Daily transaction reconciliation process
- Automated cleanup of expired sessions
- Webhook retry mechanism
- Backup and recovery plan for payment data

---

### **Success Metrics**
1. Payment success rate > 95%
2. Webhook response time < 500ms
3. User error rate < 2%
4. Fraud detection rate > 99%

---

**Attachments:**  
1. Existing UI mockups  
2. Current API documentation  
3. OPay integration guide  
4. Database schema diagram  

This brief provides complete implementation guidance while maintaining flexibility for technical decisions. Let me know if you need any component expanded for your assistant!